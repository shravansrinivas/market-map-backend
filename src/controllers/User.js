const User = require("../models/User");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const nanoid = require("nanoid");
const CryptoJS = require("crypto-js");
const sendEmail = require("../utilities/SendEmail");
const authenticateToken = require("../middleware/authenticateToken");

module.exports = {
    create: async (req, res, next) => {
        const { name, password, role, email, phoneNo } = req.body;
        // const curUser = await User.findById(req.user.id);
        // if (!curUser) {
        //     return res.json({
        //         status: "error",
        //         message: "You are not a registered admin or super admin",
        //     });
        // }
        // const addedBy = { id: curUser._id, name: curUser.name };
        // const today = new Date();
        // const addedAt = `${today.getFullYear()}-${today.getMonth()}-${today.getDate()}`;

        // const { name, role, email, phoneNo } = req.body;

        // generating random password
        const autoGeneratedPass = await nanoid.nanoid();
        if (autoGeneratedPass) {
            console.log(`Auto generated password is : ${autoGeneratedPass}`);
            console.log(typeof autoGeneratedPass);
        } else {
            console.log(`Cannot generate password`);
            res.json({
                status: "error",
                message: "Cannot generate password",
                data: null,
            });
        }

        // send the password to user via email
        // const emailBody = `Your password is : ${autoGeneratedPass}`;
        // const subject = `Market Map Password`;
        // sendEmail(email, emailBody, subject);

        console.log(`req body is : `, req.body);
        const user = new User({
            name,
            password,
            role,
            email,
            phoneNo,
            // addedBy,
            // addedAt,
        });
        try {
            await user.save();
            res.json({
                status: "success",
                message: "User created",
                data: user,
            });
        } catch (err) {
            res.json({
                status: "error",
                message: "Cannot create user",
                data: null,
                error: err,
            });
        }
    },
    login: async (req, res, next) => {
        console.log(`req body is : `, req.body);
        const { email, encryptedPassword } = req.body;

        // Decrypting the password
        const encryptionKey = process.env.REACT_APP_ENCRYPTION_KEY_SECRET;
        const bytes = CryptoJS.AES.decrypt(encryptedPassword, encryptionKey);
        const password = bytes.toString(CryptoJS.enc.Utf8);
        console.log(`Decrypred password is ${password}`);

        const user = await User.findOne({ email });
        if (!user) {
            console.log("Cannot find user");
            return res.json({
                status: "error",
                message: "Invalid email",
                data: null,
            });
        } else {
            if (user.isDeleted === true) {
                return res.json({
                    status: "error",
                    message: "User does not exist anymore",
                    data: null,
                });
            }
        }

        const isValid = await bcrypt.compare(password, user.password);
        if (!isValid) {
            res.json({
                status: "error",
                message: "Invalid email/password!!!",
                data: null,
            });
        }

        // console.log(`Token is : `, process.env.ACCESS_TOKEN_SECRET);
        const token = jwt.sign(
            { id: user._id },
            process.env.ACCESS_TOKEN_SECRET
        );

        res.json({
            status: "success",
            message: "user found",
            token: token,
        });
    },
    delete: async (req, res, next) => {
        // only admins and superadmins can delete users
        // authenticate user before allowing them to delete

        console.log(`req body is : `, req.body);
        const { email, password } = req.body;

        // user who is deleting the other user
        const user = await User.findById(req.user.id);
        if (!user) {
            return res.json({
                status: "error",
                message: "You are not a registered user",
            });
        }

        if (user.role === "User") {
            res.json({
                status: "error",
                message: "you don't have the permission to delete another user",
            });
        }

        const userToBeDeleted = await User.findOne({ email });
        if (!userToBeDeleted) {
            return res.json({
                status: "error",
                message: "User does not exist",
                data: null,
            });
        }

        if (user.role === "Admin" && userToBeDeleted.role !== "User") {
            return res.json({
                status: "error",
                message: "You cannot delete an Admin or Super Admin",
                data: null,
            });
        }
        // const deletedUser = await User.findOneAndUpdate({ email });
        const deletedUser = await User.findOneAndUpdate(
            { email },
            { isDeleted: true }
        );
        res.json({
            status: "success",
            message: "Deleted user successfuly",
            // data: deletedUser,
        });
    },

    update: async (req, res, next) => {
        const { id, name, email, phoneNo, role, status } = req.body;
        const curUser = await User.findById(req.user.id);
        if (!curUser) {
            return res.json({
                status: "error",
                message: "You are not a registered user",
            });
        }
        const updatedBy = { id: curUser._id, name: curUser.name };
        const updatedAt = Date.now();

        if (req.user.role === "User") {
            return res.json({
                status: "error",
                message: "you don't have the permission to update another user",
            });
        }

        const userToBeUpdated = await User.findById(id);
        if (!userToBeUpdated) {
            return res.json({
                status: "error",
                message: "User does not exist",
                // data: null,
            });
        }

        if (
            req.user.role === "Admin" &&
            userToBeUpdated.role === "Super Admin"
        ) {
            return res.json({
                status: "error",
                message: "You don't have permission to update a super admin",
            });
        }

        const updatedUser = {
            name,
            email,
            phoneNo,
            role,
            status,
            updatedBy,
            updatedAt,
        };
        await User.findByIdAndUpdate(id, { $set: updatedUser }, { new: true });

        res.json({ status: "success", message: "User updated" });
    },
    // returns a list of all users
    getUsers: async (req, res, next) => {
        User.find({ isDeleted: false })
            .then((users) => {
                const usersArray = [];
                for (let user of users) {
                    const {
                        name,
                        email,
                        phoneNo,
                        role,
                        status,
                        updatedBy,
                        updatedAt,
                        addedBy,
                        addedAt,
                        _id,
                    } = user;
                    console.log(`Updated By ${updatedBy}`);
                    usersArray.push({
                        name,
                        email,
                        phoneNo,
                        role,
                        status,
                        updatedBy,
                        updatedAt,
                        addedBy,
                        addedAt,
                        _id,
                    });
                }
                res.send(usersArray);
            })
            .catch((err) => {
                res.json({
                    status: "error",
                    message: "cannot find users",
                    error: err,
                });
            });
    },
};
